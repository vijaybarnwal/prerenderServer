{
  "author": {
    "name": "Prerender.io"
  },
  "name": "prerender",
  "description": "Service to prerender Javascript rendered pages for SEO",
  "version": "3.3.5",
  "repository": {
    "type": "git",
    "url": "https://github.com/prerender/prerender"
  },
  "dependencies": {
    "lodash": "~2.4.0",
    "cache-manager": "0.2.0",
    "aws-sdk": "~1.13.0",
    "phantom": "~0.5.7",
    "phantomjs": "~1.9.7-1"
  },
  "bin": {
    "prerender": "server.js"
  },
  "scripts": {
    "start": "node server.js"
  },
  "readme": "Prerender Service [![Stories in Ready](https://badge.waffle.io/prerender/prerender.png?label=ready&title=Ready)](https://waffle.io/prerender/prerender)\n===========================\n\nGoogle, Facebook, Twitter, Yahoo, and Bing are constantly trying to view your website... but they don't execute javascript. That's why we built Prerender. Prerender is perfect for AngularJS SEO, BackboneJS SEO, EmberJS SEO, and any other javascript framework.\n\nBehind the scenes, Prerender is a node server from [prerender.io](http://prerender.io) that uses phantomjs to create static HTML out of a javascript page. We host this as a service at [prerender.io](http://prerender.io) but we also open sourced it because we believe basic SEO is a right, not a privilege!\n\nIt should be used in conjunction with [these middleware libraries](#middleware) to serve the prerendered HTML to crawlers for SEO. Get started in two lines of code using [Rails](https://github.com/prerender/prerender_rails) or [Node](https://github.com/prerender/prerender-node).\n\nPrerender adheres to google's `_escaped_fragment_` proposal, which we recommend you use. It's easy:\n- Just add &lt;meta name=\"fragment\" content=\"!\"> to the &lt;head> of all of your pages\n- If you use hash urls (#), change them to the hash-bang (#!)\n- That's it! Perfect SEO on javascript pages.\n\nPrerender includes lots of plugins, for example using Amazon S3 to [cache your prerendered HTML](#s3-html-cache).  \nPrerender also starts multiple phantomjs processes to maximize throughput.\n\n\n### <a id='middleware'></a>\n## Middleware\n\nThis is a list of middleware available to use with the prerender service:\n\n#### Official middleware\n\n###### Javascript\n* [prerender-node](https://github.com/prerender/prerender-node) (Express)\n\n###### Ruby\n* [prerender_rails](https://github.com/prerender/prerender_rails) (Rails)\n\n###### Apache\n* [.htaccess](https://gist.github.com/thoop/8072354)\n\n###### Nginx\n* [nginx.conf](https://gist.github.com/thoop/8165802)\n\n#### Community middleware\n\n###### PHP\n* [zfr-prerender](https://github.com/zf-fr/zfr-prerender) (Zend Framework 2)\n* [YuccaPrerenderBundle](https://github.com/rjanot/YuccaPrerenderBundle) (Symfony 2)\n\n###### Java\n* [prerender-java](https://github.com/greengerong/prerender-java)\n\n###### Grails\n* [grails-prerender](https://github.com/tuler/grails-prerender)\n\n###### Nginx\n* [Reverse Proxy Example](https://gist.github.com/Stanback/6998085)\n\n###### Apache\n* [.htaccess](https://gist.github.com/Stanback/7028309)\n\nRequest more middleware for a different framework in this [issue](https://github.com/prerender/prerender/issues/12).\n\n\n\n## How it works\nThis is a simple service that only takes a url and returns the rendered HTML (with all script tags removed).\n\nNote: you should proxy the request through your server (using middleware) so that any relative links to CSS/images/etc still work.\n\n`GET` http://service.prerender.io/https://www.google.com\n\n`GET` http://service.prerender.io/https://www.google.com/search?q=angular\n\n\n## Running locally\nIf you are trying to test Prerender with your website on localhost, you'll have to run the Prerender server locally so that Prerender can access your local dev website.\n\nIf you are running the prerender service locally. Make sure you set your middleware to point to your local Prerender server with:\n\n`export PRERENDER_SERVICE_URL=<your local url>`\n\n\t$ npm install\n\t$ node server.js\n\t// also supports heroku style invocation using foreman\n\t$ foreman start\n\n\n## Deploying your own on heroku\n\n\t$ git clone https://github.com/prerender/prerender.git\n\t$ heroku create\n\t$ git push heroku master\n\n#Customization\n\nSee [prerender.io/server](https://prerender.io/server) to see how to customize the server.\n\nYou can clone this repo and run `server.js`  \nOR  \nuse `npm install prerender --save` to create an express-like server with custom plugins\n\n## Plugins\n\nSee [prerender.io/server](https://prerender.io/server) to see how to create plugins.\n\nWe use a plugin system in the same way that Connect and Express use middleware. Our plugins are a little different and we don't want to confuse the prerender plugins with the [prerender middleware](#middleware), so we opted to call them \"plugins\".\n\nPlugins are in the `lib/plugins` directory, and add functionality to the prerender service.\n\nEach plugin can implement any of the plugin methods:\n\n####`init()`\n\n####`beforePhantomRequest(req, res, next)`\n\n####`onPhantomPageCreate(req, res, next)`\n\n####`afterPhantomRequest(req, res, next)`\n\n####`beforeSend(req, res, next)`\n\n## Available plugins\n\n### basicAuth\n\nIf you want to only allow access to your Prerender server from authorized parties, enable the basic auth plugin.\n\nYou will need to add the `BASIC_AUTH_USERNAME` and `BASIC_AUTH_PASSWORD` environment variables.\n```\nexport BASIC_AUTH_USERNAME=prerender\nexport BASIC_AUTH_PASSWORD=test\n```\n\nThen make sure to pass the basic authentication headers (password base64 encoded).\n\n```\ncurl -u prerender:wrong http://localhost:1337/http://example.com -> 401\ncurl -u prerender:test http://localhost:1337/http://example.com -> 200\n```\n\n### removeScriptTags\n\nWe remove script tags because we don't want any framework specific routing/rendering to happen on the rendered HTML once it's executed by the crawler. The crawlers may not execute javascript, but we'd rather be safe than have something get screwed up.\n\nFor example, if you rendered the HTML of an angular page but left the angular scripts in there, your browser would try to execute the angular routing and rendering on a page that no longer has any angular bindings.\n\n### httpHeaders\n\nIf your Javascript routing has a catch-all for things like 404's, you can tell the prerender service to serve a 404 to google instead of a 200. This way, google won't index your 404's.\n\nAdd these tags in the `<head>` of your page if you want to serve soft http headers. Note: Prerender will still send the HTML of the page. This just modifies the status code and headers being sent.\n\nExample: telling prerender to server this page as a 404\n```html\n<meta name=\"prerender-status-code\" content=\"404\">\n```\n\nExample: telling prerender to serve this page as a 302 redirect\n```html\n<meta name=\"prerender-status-code\" content=\"302\">\n<meta name=\"prerender-header\" content=\"Location: http://www.google.com\">\n```\n\n### whitelist\n\nIf you only want to allow requests to a certain domain, use this plugin to cause a 404 for any other domains.\n\nYou can add the whitelisted domains to the plugin itself, or use the `ALLOWED_DOMAINS` environment variable.\n\n`export ALLOWED_DOMAINS=www.prerender.io,prerender.io`\n\n### blacklist\n\nIf you want to disallow requests to a certain domain, use this plugin to cause a 404 for the domains.\n\nYou can add the blacklisted domains to the plugin itself, or use the `BLACKLISTED_DOMAINS` environment variable.\n\n`export BLACKLISTED_DOMAINS=yahoo.com,www.google.com`\n\n\n### <a id='s3-html-cache'></a>\n### s3HtmlCache\n\nA `GET` request will check S3 for a cached copy. If a cached copy is found, it will return that. Otherwise, it will make the request to your server and then persist the HTML to the S3 cache.\n\nA `POST` request will skip the S3 cache. It will make a request to your server and then persist the HTML to the S3 cache. The `POST` is meant to update the cache.\n\nYou'll need to sign up with Amazon Web Services and export these 3 environment variables.\n\n```\n$ export AWS_ACCESS_KEY_ID=<aws access key>\n$ export AWS_SECRET_ACCESS_KEY=<aws secret access key>\n$ export S3_BUCKET_NAME=<bucket name>\n```\n\nWarning! Your keys should be kept private and you'll be charged for all files uploaded to S3.\n\n> If Prerender is hosted on a EC2 instance, you can also take advantage of [IAM instance roles](http://aws.typepad.com/aws/2012/06/iam-roles-for-ec2-instances-simplified-secure-access-to-aws-service-apis-from-ec2.html)\nso that you don't need to export your AWS credentials.\n\n> You can also export the S3_PREFIX_KEY variable so that the key (which is by default the complete requested URL) is\nprefixed. This is useful if you want to organize the snapshots in the same bucket.\n\n#### Region support\n\nBy default, s3HtmlCache works with US regions, if your bucket is localized in another region you can config it with an environment variable : `AWS_REGION`.\n\n```\n$ export AWS_REGION=<region name>\n```\n\nFor example :\n\n```\n$ export AWS_REGION=eu-west-1\n```\n\n### inMemoryHtmlCache\n\nThe default is an in memory cache but you can easily change it to any caching system compatible with the `cache-manager` nodejs package.\n\nFor example, with the request:\n\n`GET` http://service.prerender.io/https://www.facebook.com/\n\nFirst time: Overall Elapsed:\t00:00:03.3174661\n\nWith cache: Overall Elapsed:\t00:00:00.0360119\n\n\n### logger\n\nThis will show console.log's from the phantomjs page in your local console. Great for debugging.\n\n### mongodbCache\n\nCaches pages in a MongoDB database. Available at [prerender-mongodb-cache](https://github.com/lammertw/prerender-mongodb-cache) by [@lammertw](https://github.com/lammertw)\n\n\n### memjsCache\n\nCaches pages in a memjs(memcache) service. Available at [prerender-memjs-cache](https://github.com/lammertw/prerender-memjs-cache) by [@lammertw](https://github.com/lammertw)\n\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Todd Hooper &lt;todd@prerender.io&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/prerender/prerender/issues"
  },
  "_id": "prerender@3.3.5",
  "dist": {
    "shasum": "515208c091afa6ee55f35c84be66a615634c8b6f"
  },
  "_from": "prerender@3.3.5",
  "_resolved": "https://registry.npmjs.org/prerender/-/prerender-3.3.5.tgz"
}
