var cache_manager = require('cache-manager');
 var moment = require('moment');
module.exports = {
    init: function() {
        this.cache = cache_manager.caching({
            store: file_cache
        });
    },

    beforePhantomRequest: function(req, res, next) {
        if(req.method !== 'GET') {
            return next();
        }

        this.cache.get(req.prerender.url, function (err, result) {
            if (!err && result) {
                console.log('cache hit ['+result.length+']');
                res.send(200, result);
            } else {
                next();
            }
        });
    },

    afterPhantomRequest: function(req, res, next) {
        this.cache.set(req.prerender.url, req.prerender.documentHTML);
        next();
    }
};

var fs = require('fs');
var file_cache = {
    get: function(key, callback) {
        console.log('getting content for['+key+']');
        var key1 = "/var/www/storehippocache/" + key.replace(/[^a-zA-Z0-9]+/g, '_');
        if(fs.existsSync(key1)){
            fs.stat(key1, function (err, stats) {
                var modifiedTime = stats.mtime.getTime();
                var currentTime = moment().subtract('days', 0);
                var accessTime = currentTime - modifiedTime;
                console.log('current time is:' + currentTime + '\n Access Time is:' + accessTime);
                if (err) {
                    return callback(err, null);
                }
                //604800000 => timeStamp for 7 days
                if (accessTime > 604800000) {
                    console.log('here in regenerate cache after 7 days');
                    return callback(new Error("stale file"), null);
                } else {
                    fs.readFile(key1, callback);
                }
            });
        }else{
            fs.readFile(key1, callback);
        }
    },
    set: function(key, value, callback) {
        console.log('setting content for['+key+']');
	    console.log(key);
        var key1 = "/var/www/storehippocache/" + key.replace(/[^a-zA-Z0-9]+/g, '_');
	    fs.writeFile(key1, value, callback);
    }
};
